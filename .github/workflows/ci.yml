name: CI

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
  pull_request:
    branches: [main]

env:
  GO_VERSION: "1.24"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache-dependency-path: go.sum

    - name: Get dependencies
      run: |
        go mod download
        go mod verify

    - name: Run go fmt check
      run: |
        fmt_output=$(go fmt ./...)
        if [ -n "$fmt_output" ]; then
          echo "The following files need formatting:"
          echo "$fmt_output"
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload coverage
      if: success()
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux]
        goarch: [amd64, arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache-dependency-path: go.sum

    - name: Test Build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
        GIT_COMMIT=$(git rev-parse --short HEAD)
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        LDFLAGS="-s -w"
        LDFLAGS="${LDFLAGS} -X main.Version=${VERSION}"
        LDFLAGS="${LDFLAGS} -X main.GitCommit=${GIT_COMMIT}"
        LDFLAGS="${LDFLAGS} -X main.BuildDate=${BUILD_DATE}"
        
        go build -ldflags="${LDFLAGS}" -o /tmp/hyprmon-${{ matrix.goarch }}
        
        # Verify it was built
        ls -la /tmp/hyprmon-${{ matrix.goarch }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache-dependency-path: go.sum

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m